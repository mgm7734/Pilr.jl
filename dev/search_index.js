var documenterSearchIndex = {"docs":
[{"location":"mongo/#Mongo","page":"Mongo","title":"Mongo","text":"","category":"section"},{"location":"mongo/","page":"Mongo","title":"Mongo","text":"Pages = [\"mongo.md\"]","category":"page"},{"location":"mongo/#API-Reference","page":"Mongo","title":"API Reference","text":"","category":"section"},{"location":"mongo/","page":"Mongo","title":"Mongo","text":"Pilr.bson\nPilr.database\nPilr.dataset_collection\nPilr.Database\nPilr.flatdict\nPilr.pilrDataFrame\nPilr.MongoDataFrames.find\nPilr.MongoDataFrames.aggregate\nMongoc.find","category":"page"},{"location":"mongo/#Pilr.bson","page":"Mongo","title":"Pilr.bson","text":"bson(pair...) => Mongoc.BSON\nbson(AbstractVector{pair}) => Vector{Mongoc.BSON}\n\nConstruct a BSON object using keyword arguments or pairs to reduce quote clutter.\n\nExamples\n\njulia> bson(\"metadata.pt\" => \"xyz\", :project=>\"\\$in\" => [\"proj1\", \"proj2\"])\nMongoc.BSON with 2 entries:\n  \"metadata.pt\" => \"xyz\"\n  \"project\"     => Dict{Any, Any}(\"\\$in\"=>Any[\"proj1\", \"proj2\"])\n\njulia> bson([\n         \"\\$match\"=>:type=>\"SUBMIT\", \n         \"\\$group\"=>(:_id=>\"\\$pt\", :N=>\"\\$sum\"=>1)\n       ])\nMongoc.BSON with 2 entries:\n  \"0\" => Dict{Any, Any}(\"\\$match\"=>Dict{Any, Any}(\"type\"=>\"SUBMIT\"))\n  \"1\" => Dict{Any, Any}(\"\\$group\"=>Dict{Any, Any}(\"_id\"=>\"\\$pt\", \"N\"=>Dict{Any,…\n\njulia> bson(a=1, b=2)\nMongoc.BSON with 2 entries:\n  \"a\" => 1\n  \"b\" => 2\n\n\n\n\n\n","category":"function"},{"location":"mongo/#Pilr.database","page":"Mongo","title":"Pilr.database","text":"database(jenkins_user, db_name, db_password [, localport = 29030]) => Database\n\nReturn a Database connection.\n\nOptions\n\nssh_opts::AbstractVector{String}: extra arguments for the ssh tunnel command. Example: [\"-Fnone\", \"\"-i/home/me/.ssh/alt_rsa\"]\n\nExamples\n\njulia> db = database(\"mmendel\", \"mei-s4r-qa\", ENV[\"MONGO_PASSWORD\"]) [...]\n\njulia> import Mongoc\n\njulia> Mongoc.count_documents(db[\"project\"]) 1056\n\n\n\n\n\ndatabase(jenkins_user [, db_name, [, db_password]] [localport = localport])\n\nConstruct a connected database defaults.\n\n\n\n\n\n","category":"function"},{"location":"mongo/#Pilr.dataset_collection","page":"Mongo","title":"Pilr.dataset_collection","text":"dataset_collection(db, project_code, dataset_code, [ data | rawData | deleted ])\n\nReturn a Mongoc.Collection associated with a given PiLR dataset.\n\nExamples\n\njulia> db = database(ENV[\"JENKINS_USER\"], QA, ENV[\"MONGO_PASSWORD\"]);\n\n\n\n\n\n\n","category":"function"},{"location":"mongo/#Pilr.Database","page":"Mongo","title":"Pilr.Database","text":"Wrap a Mongoc.Database and a Mongoc.Client\n\n\n\n\n\n","category":"type"},{"location":"mongo/#Pilr.flatdict","page":"Mongo","title":"Pilr.flatdict","text":"flatdict(cursor ; [separator = \"!\"])\n\nConvert an iterable of nested Dict{String,Any} (such as a Cursor returned by Mongoc.find) into a dictonary of equal length columns.\n\nThe returned dictionary can be converted to a DataFrame.\n\nEach field value that is a dictionary is replaced a field for every entry. The field names are the path.\n\nUsing \"!\" does not require quoting in Symbol names, so you can type :metadata!pt instead of \"metadata.pt\".\n\nOption Arguments\n\nseparator : path separator for flattened column names. \nreplace : either a vector of Pair{Symbol,Any} or a function (key, value) -> (key, value).\norder : a vector of columns that should appear first.\n\n\n\n\n\n","category":"function"},{"location":"mongo/#Pilr.pilrDataFrame","page":"Mongo","title":"Pilr.pilrDataFrame","text":"pilrDataFrame(db, project_code, dataset_code, [ (field=>value)... ]; [ sort ] [ limit ])\n\nFetch data froma PiLR dataset and convert it to a DataFrame with optional, common transformations.\n\nA convenience function for invoking\n\nMongoc.find(dataset_collection(...), ...) |> flatdict |> DataFrame\n\nwith common default projections and conversions.\n\nBy default, it will project out the fields listed in DEFAULT_REMOVE and convert all DateTime fields to ZonedDateTime.\n\nArguments\n\ndb::Union{Pilr.Database,Mongoc.Database} - typically the result of Pilr.Database\n`filter::Pair\n\nKeyword arguments\n\nThe following options are passed along to Mongoc.find with bson automatically applied.\n\nprojection\nsort\n\nAll other keyword arguments are passed on to Mongoc.find.\n\nTODO\n\nConvert all DateTime columns to ZonedDateTime.  Have option to list fields that are actually local time.\n\nExamples\n\njulia> df = pilrDataFrame(database(ENV[\"JENKINS_USER\"], QA, ENV[\"MONGO_PASSWORD\"]),\n                          \"base_pilr_ema\", APP_LOG,\n                          \"data.tag\" => \"SURVEY_QUEUE\";\n                          sort=:_id=>1, limit=1)\n1×8 DataFrame\n Row │ timestamp                  metadata!pt  data!tag      data!msg          ⋯\n     │ ZonedDat…                  String       String        String            ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ 2018-01-10T18:39:34-06:00  pb1          SURVEY_QUEUE  Surveys displayed ⋯\n                                                               5 columns omitted\n\n\n\n\n\n\n","category":"function"},{"location":"mongo/#Pilr.MongoDataFrames.find","page":"Mongo","title":"Pilr.MongoDataFrames.find","text":"find(collection [ , field => match_expr ]... ; [ , option => value ])\n\nShort-hand syntax for invoking Mongoc.find and converting result to a DataFrame.\n\nExample\n\njulia> using Pilr, Pilr.MongoDataFrames, DataFrames\n\njulia> db = database(ENV[\"JENKINS_USER\"], QA, ENV[\"MONGO_PASSWORD\"]);\n\njulia> find(db[\"project\"], :code=>+:regex=>\"^test\"; :limit=>2) |>\n       df->select(df, :code, :dateCreated)\n2×2 DataFrame\n Row │ code    dateCreated             \n     │ String  DateTime                \n─────┼─────────────────────────────────\n   1 │ test1   2014-12-20T06:14:10.810\n   2 │ test2   2015-01-12T17:28:50.481\n\n\n\n\n\n","category":"function"},{"location":"mongo/#Pilr.MongoDataFrames.aggregate","page":"Mongo","title":"Pilr.MongoDataFrames.aggregate","text":"aggregate(collection, pipeline ; [ , option => value ])\n\nShort-hand syntax for invoking Mongoc.aggreate and converting result to a DataFrame.\n\nExample\n\njulia> using Pilr, Pilr.MongoDataFrames\n\njulia> db = database(ENV[\"JENKINS_USER\"], QA, ENV[\"MONGO_PASSWORD\"]);\n\njulia> aggregate(dataset_collection(db, \"base_pilr_ema\", SURVEY_DATA),\n                 [\n                   +:match => :data!event_type => \"survey_submitted\",\n                   +:limit => 1000,\n                   +:group => (:_id => +:metadata!pt,\n                               :surveys_submitted => +:sum => 1,\n                               :t => +:max => +:metadata!timestamp),\n                   +:limit=>2\n                 ]; :allowDiskUse => true)\n2×3 DataFrame\n Row │ _id       surveys_submitted  t                   \n     │ String    Int64              DateTime            \n─────┼──────────────────────────────────────────────────\n   1 │ mei01                     7  2022-06-08T12:22:05\n   2 │ amios-01                 14  2021-10-14T15:42:12\n\n\n\n\n\n\n","category":"function"},{"location":"mongo/#Mongoc.find","page":"Mongo","title":"Mongoc.find","text":"Create Mongoc.BSON arguments from pairs & invoke Mongoc.find\n\n\n\n\n\n","category":"function"},{"location":"#Pilr.jl-Documentation","page":"Home","title":"Pilr.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tools for accessing and analyzing PiLR data.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can install Pilr.jl by typing the following in the Julia REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add Pilr","category":"page"},{"location":"","page":"Home","title":"Home","text":"followed by ","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pilr","category":"page"},{"location":"","page":"Home","title":"Home","text":"to load the package.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pilr.database returns a Pilr.Database connected to a PiLR Mongo database via a tunnel.","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pilr\njulia> using Pilr.MongoDataFrames\njulia> db = database(ENV[\"JENKINS_USER\"], QA, ENV[\"MONGO_PASSWORD\"]);\njulia> proj = find(db[\"project\"], :code=>\"base_pilr_ema\")\njulia> aggregate(dataset_collection(db, proj.code[1], SURVEY_DATA),\n                 [\n                   +:match => :data!event_type => \"survey_submitted\",\n                   +:limit => 1000,\n                   +:group => (:_id => +:metadata!pt,\n                               :surveys_submitted => +:sum => 1,\n                               :t => +:max => +:metadata!timestamp),\n                   +:limit=>5\n                 ])\n5×3 DataFrame\n Row │ _id          surveys_submitted  t                   \n     │ String       Int64              DateTime            \n─────┼─────────────────────────────────────────────────────\n   1 │ mei01                        7  2022-06-08T12:22:05\n   2 │ amios-01                    14  2021-10-14T15:42:12\n   3 │ sbmeitest01                  2  2022-04-20T16:27:50\n   4 │ pb112020                     1  2021-03-16T19:29:57\n   5 │ amandroid                   15  2021-02-01T05:09:47\n\n","category":"page"},{"location":"#main-index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"mongo.md\"]","category":"page"}]
}
